VAI PODER USAR A DO GEMINI OU A DO GPT
# app/services/ia_service.py
import os
from dotenv import load_dotenv

load_dotenv()

# Verifica qual modelo usar
PROVIDER = os.getenv("MODEL_PROVIDER", "gemini").lower()

# Importa apenas o necessário para cada provedor
if PROVIDER == "openai":
    import openai
    openai.api_key = os.getenv("OPENAI_API_KEY")
    modelo_openai = os.getenv("OPENAI_MODEL", "gpt-3.5-turbo")
elif PROVIDER == "gemini":
    import google.generativeai as genai
    genai.configure(api_key=os.getenv("GEMINI_API_KEY"))
else:
    raise ValueError("MODEL_PROVIDER inválido: use 'openai' ou 'gemini'")


async def gerar_codigo_ia(prompt: str) -> str:
    system_prompt = (
        "Você é um especialista em gerar código HTML, Tailwind, React e JavaScript. "
        "Gere somente código, sem explicações."
    )

    if PROVIDER == "openai":
        response = openai.ChatCompletion.create(
            model=modelo_openai,
            messages=[
                {"role": "system", "content": system_prompt},
                {"role": "user", "content": prompt}
            ],
            temperature=0.7,
            max_tokens=1000
        )
        return response.choices[0].message["content"]

    elif PROVIDER == "gemini":
        model = genai.GenerativeModel("gemini-pro")
        response = model.generate_content(
            [system_prompt, prompt],
            generation_config={
                "temperature": 0.7,
                "max_output_tokens": 1000,
            }
        )
        return response.text

    else:
        raise ValueError("Modelo não suportado.")
